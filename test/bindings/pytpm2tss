#!/usr/bin/python3 -u
"""
SPDX-License-Identifier: BSD-2

Copyright 2018, Fraunhofer SIT
All rights reserved.
"""
import unittest
import subprocess
from time import sleep

from pytpm2tss import *

class SimulatorTest(unittest.TestCase):
    """
    Testcase that requires the tpm_server simulator to be running.
    """

    @classmethod
    def setUpClass(cls):
        # We are setting up a simulator in here, because we require the standard ports.
        # pytpm2tss does not yet support setting tctis and thus relies on esys to do so.
        print("Setting up simulator: ", end='')
        cls.tpm = subprocess.Popen(['tpm_server', '-rm'])
        sleep(2)
        if cls.tpm.poll() is not None:
            print("tpm_server not started, retrying...")
            sleep(5)
            cls.tpm = subprocess.Popen(['tpm_server'])
            sleep(2)
        if cls.tpm.poll() is not None:
            print("tpm_server not started, SKIPPING")
            exit(77) #Skipped
        print("OK")

    @classmethod
    def tearDownClass(cls):
        cls.tpm.terminate()
        cls.tpm.wait()

class TestPyTPM2TSS(SimulatorTest):

    def test_000_context(self):
        with self.subTest(context=True):
            e = EsysContext()
        with self.subTest(startup=True):
            e.Startup(TPM2_SU.CLEAR)
        with self.subTest(GetRandom=True):
            e.GetRandom(5)
        with self.subTest(CreatePrimary=True):
            inSensitive = TPM2B_SENSITIVE_CREATE()
            inPublic = TPM2B_PUBLIC()
            outsideInfo = TPM2B_DATA()
            creationPCR = TPML_PCR_SELECTION()

            inPublic.publicArea.type = TPM2_ALG.ECC
            inPublic.publicArea.nameAlg = TPM2_ALG.SHA1
            inPublic.publicArea.objectAttributes = TPMA_OBJECT.USERWITHAUTH | \
                                                   TPMA_OBJECT.SIGN_ENCRYPT | \
                                                   TPMA_OBJECT.RESTRICTED | \
                                                   TPMA_OBJECT.FIXEDTPM | \
                                                   TPMA_OBJECT.FIXEDPARENT | \
                                                   TPMA_OBJECT.SENSITIVEDATAORIGIN
            inPublic.publicArea.parameters.eccDetail.scheme.scheme = TPM2_ALG.ECDSA
            inPublic.publicArea.parameters.eccDetail.scheme.details.ecdsa.hashAlg = TPM2_ALG.SHA256
            inPublic.publicArea.parameters.eccDetail.symmetric.algorithm = TPM2_ALG.NULL
            inPublic.publicArea.parameters.eccDetail.kdf.scheme = TPM2_ALG.NULL
            inPublic.publicArea.parameters.eccDetail.curveID = TPM2_ECC.NIST_P256

            e.tr.OWNER.setAuth("")

            x, _, _, _, _ = e.CreatePrimary(e.tr.OWNER,
                                    inSensitive, inPublic, outsideInfo, creationPCR,
                                    session1=e.tr.PASSWORD)

if __name__ == "__main__":
    unittest.main()
